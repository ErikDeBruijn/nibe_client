#!/usr/bin/env ruby

require_relative "../lib/include"
require "optparse"
require "ostruct"
options = OpenStruct.new(json: false, output: :yaml)

def update_token_file(client)
  token_file_data = client.token_file_data
  return unless token_file_data

  File.write(client.token_file, token_file_data)
end

def get_niebe_client(token_file = "#{BASE_PATH}/.nibe-credentials.json")
  client_id, client_secret = get_client
  nibe_client = NibeUplink::Client.new(token_file: token_file, verbose: true, client_id: client_id,
                                       client_secret: client_secret)
  nibe_client.credentials = NibeUplink::Credentials.load_from_file(token_file)
  nibe_client
end

nibe_client = get_niebe_client
systems = nil

op = OptionParser.new do |opt|
  opt.on("-s", "--system SYSTEMID", "Select a system by SystemID") do |o|
    systems = nibe_client.systems
    if systems.keys.exclude?(o.to_i)
      # to stderr:
      warn "SystemID #{o} isn't found in account. Options: #{systems.keys.join ", "}"
      exit(1)
    end

    options[:system_id] = o
  end
  opt.on("-j", "--json", "Output JSON") { options[:output] = :json }
  opt.on("-y", "--yaml", "Output YAML (default)") { options[:output] = :yaml }
  opt.on("-p", "--prom", "Output Prometheus format") { options[:output] = :prom }
  opt.on("--instance-name NAME", "Instance name in Prometheus output") { options[:prom_instance_name] = _1 }
  opt.on("-l", "--list", "List all systems") do
    puts "Getting data for #{systems.count} systems:"
    nibe_client.systems.each do |(system_id, system)|
      puts "System name: #{system.name} SystemID: #{system_id}"
    end
    exit
  end
end
op.parse!

puts op.help if options[:system_id].nil?

if options[:system_id]
  system = systems[options[:system_id].to_i]
  system_status = system.get_status
  categories = %w[STATUS CPR_INFO_EP14 SYSTEM_1 PASSIVE_COOLING_INTERNAL ADDITION SMART_PRICE_ADAPTION AUX_IN_OUT
                  SYSTEM_INFO]
  categories.each do |category|
    system_status.merge!(system.get_service_info(category))
  end
  case options[:output]
  when :yaml
    puts system_status.transform_values { |v| "#{v[:value]} #{v[:unit]}" }.to_yaml
  when :json
    puts JSON.pretty_generate(system_status.transform_values { |v| { val: v[:value], unit: v[:unit] } })
  when :prom
    puts "# System name: #{system.name} SystemID: #{options[:system_id]} Serial number: #{system.serial_number}"

    system_status.each do |(k, v)|
      labels = []
      labels << "instance_name=\"#{options[:prom_instance_name]}\"" if options[:prom_instance_name]
      labels << "instance=\"#{options[:system_id].to_i}\""
      labels << "designation=\"#{v[:designation]}\""
      labels << "unit=\"#{v[:unit]}\""
      puts "#{k.tr(".", "_")}{#{labels.join ","}} #{v[:value].to_f}"
    end
  end
end
